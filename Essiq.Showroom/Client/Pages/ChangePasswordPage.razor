@page "/user/changepassword"
@using System.ComponentModel.DataAnnotations
@using Essiq.Showroom.Server.Client
@using Essiq.Showroom.Client.Services
@inject NavigationManager NavigationManager
@inject IUserClient UserClient
@inject IJSHelpers JSHelpers
@attribute [Authorize]

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h2>Change Password</h2>
</div>


<EditForm Model="@changePasswordForm" OnValidSubmit="@SubmitForm">

    <div class="mb-3">
        <label for="currentPassword">Current Password</label>
        <input type="password" class="form-control" placeholder="Current Password" @bind="changePasswordForm.CurrentPassword" />
        <ValidationMessage For="@(() => changePasswordForm.CurrentPassword)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="newPassword">New Password</label>
        <input type="password" class="form-control" placeholder="New Password" @bind="changePasswordForm.NewPassword" />
        <ValidationMessage For="@(() => changePasswordForm.NewPassword)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="confirmNewPassword">Confirm New Password</label>
        <input type="password" class="form-control" placeholder="Confirm New Password" @bind="changePasswordForm.ConfirmNewPassword" />
        <ValidationMessage For="@(() => changePasswordForm.ConfirmNewPassword)"></ValidationMessage>
    </div>

    <hr class="mb-4">
    <button class="btn btn-primary" type="submit">Change</button>
</EditForm>


@code {
    ChangePasswordForm changePasswordForm = new ChangePasswordForm();

    async Task SubmitForm()
    {
        try
        {
            await UserClient.ChangePasswordAsync(changePasswordForm.CurrentPassword, changePasswordForm.NewPassword);

            NavigationManager.NavigateTo("/user");
        }
        /*catch (ApiException exc)
        {

        }
        catch (HttpRequestException exc)
        {

        }*/
        catch (Exception exc)
        {
            await JSHelpers.Alert(exc.Message);
        }
    }

    class ChangePasswordForm
    {
        [Required]
        [DataType(DataType.Password)]
        public string CurrentPassword { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPassword))]
        public string ConfirmNewPassword { get; set; }

    }
}
