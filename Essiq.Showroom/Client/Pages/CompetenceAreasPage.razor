@page "/competenceareas"
@using Essiq.Showroom.Server.Client
@using Essiq.Showroom.Client.Services
@inject ICompetenceAreasClient CompetenceAreasClient
@inject NavigationManager NavigationManager
@inject IJSHelpers JSHelpers
@using Essiq.Showroom.Shared
@attribute [Authorize(Roles = RoleConstants.Administrator)]

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h2>Competence Areas</h2>
</div>

<a class="btn btn-primary" href="/competenceareas/add"><span class="oi oi-plus" aria-hidden="true"></span> Add</a>

<Loader Task="@task">
    <TableView Items="competenceAreas.AsReadOnly()" 
               TItem="CompetenceArea"
               OnRowClicked="@(item => NavigationManager.NavigateTo($"/competenceareas/edit/{item.Id}"))">
        <TableHeader>
            <th>Name</th>
            <th></th>
        </TableHeader>
        <RowTemplate Context="competenceArea">
            <td>@competenceArea.Name</td>
            <td>
                <a href="/competenceareas/edit/@competenceArea.Id" @onclick:stopPropagation><span class="oi oi-pencil" aria-hidden="true"></span></a>
                <a href="" @onclick="@(() => DeleteCompetenceArea(competenceArea))" @onclick:stopPropagation><span class="oi oi-trash" aria-hidden="true"></span></a>
            </td>
        </RowTemplate>
    </TableView>
</Loader>


@code {
    private Task task;
    private List<CompetenceArea> competenceAreas;

    protected override void OnInitialized()
    {
        task = OnInitialize();
    }

    private async Task OnInitialize()
    {
        try
        {
            competenceAreas = (await CompetenceAreasClient.GetCompetenceAreasAsync()).ToList();
        }
        /* catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        } */
        catch (Exception exc)
        {
            await JSHelpers.Alert(exc.Message);
        }
    }

    private async Task DeleteCompetenceArea(CompetenceArea competenceArea)
    {
        try
        {
            if (await JSHelpers.Confirm("Are you sure you want to delete?"))
            {
                await CompetenceAreasClient.DeleteCompetenceAreaAsync(competenceArea.Id);
                competenceAreas.Remove(competenceArea);
            }
        }
        /* catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        } */
        catch (Exception exc)
        {
            await JSHelpers.Alert(exc.Message);
        }
    }
}

