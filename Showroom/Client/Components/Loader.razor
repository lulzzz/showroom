@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" style="width: 3rem; height: 3rem; margin-top: 25%" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    if (faulted)
    {
        @LoadingFailedTemplate
    }
    else
    {
<div class="animated fadeIn fast" style="margin: 0 !important; padding: 0 !important">
    @ChildContent
</div>
    }
}

@code {
    bool loading = true;
    bool faulted;
    Task loadingTask;

    [Parameter]
    public Task Task { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment LoadingFailedTemplate { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Task != null)
        {
            if(loadingTask != null)
            {
                return;
            }

            if(Task.IsCompleted)
            {
                loading = false;
                if (Task.IsFaulted)
                {
                    faulted = true;
                }
                return;
            }

            loadingTask = Task.ContinueWith(t =>
            {
                loading = false;
                if (t.IsFaulted)
                {
                    faulted = true;
                }
            });

            await loadingTask;
        }
    }
}
